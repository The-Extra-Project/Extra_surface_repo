
* Todos
* Notes
** Geneartion de jeu de données 2D à partir d'images
Script qui permet de génerer un nuage de point ply à partir d'images labélisées d'empreintes de batiments.
- Entrée : Images
- sortie : Ply 2D 
(Fonction run_img2ply dans run_all_workflow.sh)

*** Image => ply
Lancer le script  ./services/create_datas/scripts/aerial_raytracing.py qui fait un lancé de rayons dans une image.
=> Entré une image "lab.tif" labesiée : 
- noir  : vide,
- blanc : solide (empreintes des batiments)
- bleu angle,
- rougle : ligne,
- vert "arbes".
=> Sortie : - un fichier ply "res.ply" 2D avec un nuage de point 2D (x,y,x_origin,y_origin,lab) qui sont l'orginie de chaque prise lazer et la position de l'echo.
            - 2 images pour visualiser (dont la "geo.tif" qui est l'image d'entrée géoreferencée) et le "res.tif" qui est visualiser le lancé de rayon)

*** Afficher metadata images
   identify -verbose nom_image.tif
*** Image Visualisation (qgis)
- qgis permet de lire du geojson (.geojson) et des geotif (image .tif avec metadatas)



** Pipeline complet de reconstruction de surface 2D
(fonction run_2d_wasure dans run_all_workflow.sh)

- Input : 2Dply
- Output : Geojson 


** GeoTrellis  (Spark + Geotif)
*** documentation  
Documentation : https://buildmedia.readthedocs.org/media/pdf/geotrellis/latest/geotrellis.pdf

*** Quick start
    https://github.com/locationtech/geotrellis/blob/master/docs/tutorials/quickstart.rst

- git clone git@github.com:geotrellis/geotrellis-sbt-template
- ./sbt
- console

*** Having the spark-context
#+BEGIN_SRC scala
  val conf = new org.apache.spark.SparkConf()
  conf.setMaster("local[*]")
  implicit val sc = geotrellis.spark.util.SparkUtils.createSparkContext("Test console", conf)
#+END_SRC


* Remarques


dump_mode 
- 0 => (simplement structure de triangulation)
- 1 => (simplex)
- 2 => (facets)



* graphframe belief propagation
https://github.com/graphframes/graphframes/blob/master/python/graphframes/examples/belief_propagation.py
https://github.com/graphframes/graphframes/blob/master/src/main/scala/org/graphframes/examples/BeliefPropagation.scala
